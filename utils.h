// ??? Assume only Little Endian

#ifndef __UT_UTILS_H__
#define __UT_UTILS_H__

#include <stdint.h>
#include <stdio.h>

#include "defs.h"


typedef struct U64P {
    uint32_t l;
    uint32_t h;
} av_packed U64P;

typedef union U64 {
    uint64_t v;
    U64P p;
} av_union U64;

#define READ_ULE(n, p) (*(const uint##n##_t *)(p))
#define WRITE_ULE(n, p, v) (*(uint##n##_t *)(p) = (v))
#define COPY_ULE(n, d, s) (WRITE_ULE(n, d, READ_ULE(n, s)))
#define CONSUME_ULE(n, p) (*(*(const uint##n##_t**)&(p))++)

#define READ_U8(p) READ_ULE(8, p)
#define WRITE_U8(p, v) WRITE_ULE(8, p, v)
#define COPY_U8(d, s) COPY_ULE(8, d, s)
#define CONSUME_U8(p) CONSUME_ULE(8, p)

#define READ_U16(p) READ_ULE(16, p)
#define WRITE_U16(p, v) WRITE_ULE(16, p, v)
#define COPY_U16(d, s) COPY_ULE(16, d, s)
#define CONSUME_U16(p) CONSUME_ULE(16, p)

#define READ_U32(p) READ_ULE(32, p)
#define WRITE_U32(p, v) WRITE_ULE(32, p, v)
#define COPY_U32(d, s) COPY_ULE(32, d, s)
#define CONSUME_U32(p) CONSUME_ULE(32, p)

#define READ_U64(p) READ_ULE(64, p)
#define WRITE_U64(p, v) WRITE_ULE(64, p, v)
#define COPY_U64(d, s) COPY_ULE(64, d, s)
#define CONSUME_U64(p) CONSUME_ULE(64, p)


#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define MAX(a, b) ((a) > (b) ? (a) : (b))



#define log_info(fmt, ...) fprintf(stdout, fmt, ##__VA_ARGS__)
#define log_info(...)
#define av_assert0(cond)
#define av_assert1(cond)

#define EINVAL 22
#define ENOSYS 38
#define ENOMEM 12
#define AVERROR(e) (-(e))
#define AVERROR_INVALIDDATA AVERROR(EINVAL)
#define AVERROR_PATCHWELCOME AVERROR(ENOSYS)


#define AV_BSWAP16C(x) (((x) << 8 & 0xff00)  | ((x) >> 8 & 0x00ff))
#define AV_BSWAP32C(x) (AV_BSWAP16C(x) << 16 | AV_BSWAP16C((x) >> 16))
#define AV_BSWAP64C(x) (AV_BSWAP32C(x) << 32 | AV_BSWAP32C((x) >> 32))


static av_pure_expr uint32_t av_bswap32(uint32_t x) {
    return AV_BSWAP32C(x);
}

static av_pure_expr uint64_t av_bswap64(uint64_t x) {
    return AV_BSWAP64C(x);
}


static void bswap_buf(uint32_t *dst, const uint32_t *src, int w) {
    int i;

    for (i = 0; i + 8 <= w; i += 8) {
        dst[i + 0] = av_bswap32(src[i + 0]);
        dst[i + 1] = av_bswap32(src[i + 1]);
        dst[i + 2] = av_bswap32(src[i + 2]);
        dst[i + 3] = av_bswap32(src[i + 3]);
        dst[i + 4] = av_bswap32(src[i + 4]);
        dst[i + 5] = av_bswap32(src[i + 5]);
        dst[i + 6] = av_bswap32(src[i + 6]);
        dst[i + 7] = av_bswap32(src[i + 7]);
    }
    for (; i < w; i++)
        dst[i + 0] = av_bswap32(src[i + 0]);
}


const uint8_t ff_reverse[256] = {
0x00,0x80,0x40,0xC0,0x20,0xA0,0x60,0xE0,0x10,0x90,0x50,0xD0,0x30,0xB0,0x70,0xF0,
0x08,0x88,0x48,0xC8,0x28,0xA8,0x68,0xE8,0x18,0x98,0x58,0xD8,0x38,0xB8,0x78,0xF8,
0x04,0x84,0x44,0xC4,0x24,0xA4,0x64,0xE4,0x14,0x94,0x54,0xD4,0x34,0xB4,0x74,0xF4,
0x0C,0x8C,0x4C,0xCC,0x2C,0xAC,0x6C,0xEC,0x1C,0x9C,0x5C,0xDC,0x3C,0xBC,0x7C,0xFC,
0x02,0x82,0x42,0xC2,0x22,0xA2,0x62,0xE2,0x12,0x92,0x52,0xD2,0x32,0xB2,0x72,0xF2,
0x0A,0x8A,0x4A,0xCA,0x2A,0xAA,0x6A,0xEA,0x1A,0x9A,0x5A,0xDA,0x3A,0xBA,0x7A,0xFA,
0x06,0x86,0x46,0xC6,0x26,0xA6,0x66,0xE6,0x16,0x96,0x56,0xD6,0x36,0xB6,0x76,0xF6,
0x0E,0x8E,0x4E,0xCE,0x2E,0xAE,0x6E,0xEE,0x1E,0x9E,0x5E,0xDE,0x3E,0xBE,0x7E,0xFE,
0x01,0x81,0x41,0xC1,0x21,0xA1,0x61,0xE1,0x11,0x91,0x51,0xD1,0x31,0xB1,0x71,0xF1,
0x09,0x89,0x49,0xC9,0x29,0xA9,0x69,0xE9,0x19,0x99,0x59,0xD9,0x39,0xB9,0x79,0xF9,
0x05,0x85,0x45,0xC5,0x25,0xA5,0x65,0xE5,0x15,0x95,0x55,0xD5,0x35,0xB5,0x75,0xF5,
0x0D,0x8D,0x4D,0xCD,0x2D,0xAD,0x6D,0xED,0x1D,0x9D,0x5D,0xDD,0x3D,0xBD,0x7D,0xFD,
0x03,0x83,0x43,0xC3,0x23,0xA3,0x63,0xE3,0x13,0x93,0x53,0xD3,0x33,0xB3,0x73,0xF3,
0x0B,0x8B,0x4B,0xCB,0x2B,0xAB,0x6B,0xEB,0x1B,0x9B,0x5B,0xDB,0x3B,0xBB,0x7B,0xFB,
0x07,0x87,0x47,0xC7,0x27,0xA7,0x67,0xE7,0x17,0x97,0x57,0xD7,0x37,0xB7,0x77,0xF7,
0x0F,0x8F,0x4F,0xCF,0x2F,0xAF,0x6F,0xEF,0x1F,0x9F,0x5F,0xDF,0x3F,0xBF,0x7F,0xFF,
};

static av_always_inline uint32_t bitswap_32(uint32_t x)
{
    return (uint32_t)ff_reverse[ x        & 0xFF] << 24 |
           (uint32_t)ff_reverse[(x >> 8)  & 0xFF] << 16 |
           (uint32_t)ff_reverse[(x >> 16) & 0xFF] << 8  |
           (uint32_t)ff_reverse[ x >> 24];
}


#endif // __UT_UTILS_H__
